name: Docker CI/CD Workflow

on:
  push:
    branches:
      - main  # Trigger workflow on push to 'main' branch
  pull_request:
    branches:
      - main  # Trigger workflow on PR to 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest  # The environment where the job will run (Ubuntu latest version)

    steps:
    # 1. Checkout the repository's code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Set up Docker Buildx (for multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. Build Docker images using the Dockerfiles
    - name: Build Docker images
      run: |
        docker build -t nginx-error-demo -f nginx-docker-homeassignment/nginx/Dockerfile.nginx .
        docker build -t testing-container -f nginx-docker-homeassignment/tester/Dockerfile.test .

    # 4. Set up and run Docker Compose (to spin up containers)
    - name: Run Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d  # Start containers in detached mode

    # 5. Run tests inside the testing container (adjust to your testing framework)
    - name: Run tests
      run: |
        docker-compose exec testing-container pytest test_script.py  # Run the test script

    # 6. Check the result of the tests and create a 'succeeded' or 'fail' file
    - name: Check if tests passed
      run: |
        if [ $? -eq 0 ]; then
          echo "succeeded" > result.txt  # If tests pass, write 'succeeded' to result.txt
        else
          echo "fail" > result.txt  # If tests fail, write 'fail' to result.txt
        fi

    # 7. Upload the result as an artifact
    - name: Upload result artifact
      uses: actions/upload-artifact@v3
      with:
        name: result  # Name of the artifact
        path: result.txt  # Path to the result file (which contains 'succeeded' or 'fail')
