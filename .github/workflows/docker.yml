name: Docker CI/CD Workflow

on:
  push:
    branches:
      - main  # Trigger workflow on push to 'main' branch
  pull_request:
    branches:
      - main  # Trigger workflow on PR to 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest  # The environment where the job will run (Ubuntu latest version)

    steps:
    # 1. Checkout the repository's code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Set up Docker Buildx (for multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 3. Install Docker Compose (for running multi-container environments)
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Verify Docker Compose installation

    # 4. Build Docker images using the Dockerfiles
    - name: Build Docker images
      run: |
        docker build --no-cache -t nginx-error-demo -f nginx/Dockerfile.nginx .
        docker build --no-cache -t testing-container -f tester/Dockerfile.test .

    # 5. Set up and run Docker Compose (to spin up containers)
    - name: Run Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d  # Start containers in detached mode

    - name: Print logs for debugging
      run: docker-compose logs testing-container

    - name: Check running containers
      run: docker ps -a  # List all containers and their status

    # 6. Run tests inside the testing container (adjust to your testing framework)
    - name: Run tests
      run: |
	docker-compose exec testing-container python ls /
        docker-compose exec testing-container pytest test_servers.py  # Run the test script

    # 7. Check the result of the tests and create a 'succeeded' or 'fail' file
    - name: Check if tests passed
      run: |
        if [ $? -eq 0 ]; then
          echo "succeeded" > result.txt  # If tests pass, write 'succeeded' to result.txt
        else
          echo "fail" > result.txt  # If tests fail, write 'fail' to result.txt
        fi

    # 8. Upload the result as an artifact
    - name: Upload result artifact
      uses: actions/upload-artifact@v3
      with:
        name: result  # Name of the artifact
        path: result.txt  # Path to the result file (which contains 'succeeded' or 'fail')
